<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux</title>
      <link href="/2022/08/10/Language/Linux/"/>
      <url>/2022/08/10/Language/Linux/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 1　programming language </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-类集框架</title>
      <link href="/2022/08/08/Language/Java-%E9%9B%86%E5%90%88/"/>
      <url>/2022/08/08/Language/Java-%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p>本文主要总结Java程序中的集合部分，主要涉及：Array、Collector、Map</p></div><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><div class="note success no-icon flat"><p>数组是一种<strong>效率最高</strong>的存储和随机访问对象引出序列的方式</p><p>所付出的代价就是数组对象的<strong>大小被固定</strong>，且再其生命周期中不可改变。</p><p>数组针对数据类型的检查可以在编译时进行，而其他容器需要泛型配合(没有泛型时，默认Object)</p></div><h3 id="实例化、输出"><a href="#实例化、输出" class="headerlink" title="实例化、输出"></a>实例化、输出</h3><div class="note default no-icon flat"><p><strong>实例化</strong></p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 静态实例化：其他引用类型也同样适用</span></span><br><span class="line">String[] words1 = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;Line&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Scala&quot;</span>&#125; ;</span><br><span class="line">String[] words = &#123;<span class="string">&quot;Line&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Scala&quot;</span>&#125; ; </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态实例化：</span></span><br><span class="line"><span class="comment"> *      没指定元素值时，值为元素类型默认值</span></span><br><span class="line"><span class="comment"> *      []: 是访问数组元素的唯一方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] words2 = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>] ;</span><br><span class="line">words2[<span class="number">0</span>] = <span class="string">&quot;Line&quot;</span> ; </span><br><span class="line">words2[<span class="number">1</span>] = <span class="string">&quot;Java&quot;</span> ;</span><br><span class="line">words2[<span class="number">2</span>] = <span class="string">&quot;Scala&quot;</span> ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><br/><div class="note default no-icon flat"><p><strong>输出</strong></p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">String[] words = &#123;<span class="string">&quot;Line&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Scala&quot;</span>&#125; ;        <span class="comment">// 其他用引用类型同样适用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：数组并不能直接输出：// [Ljava.lang.String;@1b6d3586</span></span><br><span class="line">System.out.println(words);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为字符串整体输出</span></span><br><span class="line">System.out.println(Arrays.toString(words));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代元素：foreach</span></span><br><span class="line"><span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">    System.out.println(word);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环输出元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">    Syste</span><br><span class="line">    m.out.println(words[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><br/><h3 id="方法-对象"><a href="#方法-对象" class="headerlink" title="方法-对象"></a>方法-对象</h3><p>　　<code>length</code>是数组中唯一可以访问的字段或方法。<br><br/></p><h3 id="方法-类库支持"><a href="#方法-类库支持" class="headerlink" title="方法-类库支持"></a>方法-类库支持</h3><ul><li><strong>原数组改变</strong>：排序、复制、填充</li><li><strong>原数组不变</strong>：转列表、输出、查找、判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">String[] words = &#123;<span class="string">&quot;Line&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Scala&quot;</span>&#125; ;        <span class="comment">// 其他用引用类型同样适用</span></span><br><span class="line">String[] words1 = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;Line&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Scala&quot;</span>&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="type">String</span> <span class="variable">wordStr</span> <span class="operator">=</span> Arrays.toString(words);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序和查找</span></span><br><span class="line"><span class="comment"> *      尽量先排序，再查找</span></span><br><span class="line"><span class="comment"> *      如果是引用类型，二者需传入对应的Comparator类</span></span><br><span class="line"><span class="comment"> *      如果数组中有相同元素，可以不确定是查找的哪个</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">java.util.Arrays.sort(words);</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(words, <span class="string">&quot;Line&quot;</span>);</span><br><span class="line">System.out.println(index);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较: 对比数组的长度和元素值</span></span><br><span class="line">System.out.println(Arrays.equals(words,words1));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array =&gt; List</span></span><br><span class="line">List&lt;String&gt; strings = Arrays.asList(words);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充元素值，可以局部填充</span></span><br><span class="line">Arrays.fill(words1,<span class="string">&quot;Fill&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制：比for循环复制快很多确定下：0是索引</span></span><br><span class="line">System.arraycopy(words,<span class="number">0</span>,words1,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><br/><br/><h3 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h3><p>　参考对象的引用传递和内存图。<br><br/><br><br/></p><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><!-- 类集框架图开始--><div class="note default no-icon flat"><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  %%{init: {&#39;theme&#39;: &#39;default&#39;, &#39;themeVariables&#39;: { &#39;fontSize&#39;: &#39;14px&#39;}}}%%classDiagramdirection LRCollection &lt;|-- List: 有序、可重复Collection &lt;|-- Set: 不重复List &lt;|-- ArrayList: 快速定位，异步处理List &lt;|-- Vector: 同步处理，线程安全List &lt;|-- LinkedList: 增删方便Set &lt;|-- HashSet: 无序：hashCode、equalsSet &lt;|-- SortedSetHashSet &lt;|-- LinkedHashSet: 输入顺序SortedSet &lt;|-- TreeSet: 字典顺序_Comparable%% 类定义class Collection{   &lt;&lt;interface&gt;&gt;   +add(E) bool   +addAll(Coll) bool   +clear() void   +remove(obj) bool   +contains(obj) bool   +size() int   +toArray() obj[]   +iterator() Iterator}class List{   &lt;&lt;interface&gt;&gt;   +get(index) E   +set(index,e) E   +listIterator() ListIterator   +of(E... ele) List   +forEach() default}class ArrayList{    &lt;&lt;class&gt;&gt;}class LinkedList{    &lt;&lt;class&gt;&gt;}class Set{   &lt;&lt;interface&gt;&gt;   +of(E... ele) Set}      class HashSet{   &lt;&lt;class&gt;&gt;}  class LinkedHashSet{   &lt;&lt;class&gt;&gt;} class SortedSet{   &lt;&lt;interface&gt;&gt;} class TreeSet{   &lt;&lt;class&gt;&gt;}  </pre></div></div><!-- 类集框架图结束--><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>HashSet：引用对象要实现hashCode()和equal()方法，不然也不会去重。</p><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><br/><br/><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><br/><br/>]]></content>
      
      
      <categories>
          
          <category> 1　programming language </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Collection </tag>
            
            <tag> Array </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly</title>
      <link href="/2022/08/05/tools/Hexo%20+%20Butterfly/"/>
      <url>/2022/08/05/tools/Hexo%20+%20Butterfly/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p>本文主要介绍在搭建Blog中遇到的问题和重点记录<br>框架：Hexo　　　主题：Butterfly</p></div><div class="note default no-icon flat"><p>Hexo搭建：<a href="https://zhuanlan.zhihu.com/p/102592286">https://zhuanlan.zhihu.com/p/102592286</a><br>主题设置：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p></div><hr><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>这部分内容后期再更新</p><p>核心就是：遇到问题，一定要解决，哪怕是warm，不然后面会很多坑。</p><p>基本上所有问题都是可以在网上查到并解决。<br><br/></p><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><h4 id="node-v-和-npm-v"><a href="#node-v-和-npm-v" class="headerlink" title="node -v 和 npm -v"></a>node -v 和 npm -v</h4><p>原作者在执行这两个命令时，除了版本信息外，是没有任何其余的提示信息的。<br>如果遇到其他信息，一定要尽可能解决掉再往下。<br><br/></p><h4 id="hexo-cli安装"><a href="#hexo-cli安装" class="headerlink" title="hexo-cli安装"></a>hexo-cli安装</h4><p>上一步不解决，问题同样会出现在这部分。<br>就是上面的问题解决了，这里依旧可能会有问题。<br>我这里遇到的是：需要执行一个命令：<br>    直接执行那个命令就好，如果不执行，下面的步骤会出问题。<br>    执行完之后，不要再回去执行安装命令了。<br>    接着执行下面的步骤就行。<br><br/><br><br/></p><h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p>按照<code>Butterfly</code>基本都能设置好。</p><p>有空再更新吧，回头看也没什么更新的。<br><br/></p><h3 id="各个目录的内容"><a href="#各个目录的内容" class="headerlink" title="各个目录的内容"></a>各个目录的内容</h3><p><code>theme/_config.yml</code>: 大部分功能模块的增减都在这里设置。<br>　　　　　　　　　　　这些功能模块的简单设置也是在这里。<br><br/></p><h3 id="inject引入外部内容"><a href="#inject引入外部内容" class="headerlink" title="inject引入外部内容"></a>inject引入外部内容</h3><p>这里的根目录是source进入的那个目录。<br>各个资源要放在对应的目录下，不要再在对应目录下创建文件。这是两种不同的引用方式：<br>　　前者是可以直接在链接里引用。<br>　　后者还要引入目录。</p><p>source目录下创建文件夹，在被引用的时候可以用相对路径。<br><br/><br><br/></p><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><h3 id="网易云音乐外链"><a href="#网易云音乐外链" class="headerlink" title="网易云音乐外链"></a>网易云音乐外链</h3><p>　　支持的内容：单曲、歌单、专辑、电台节目</p><ol><li>打开网易云音乐网页版，找到喜欢的歌曲，旁边直接有<mark class="hl-label blue">生成外链播放器</mark> </li><li>将生成的代码放置需要播放的page页即可(markdown).<br/><br/></li></ol><h3 id="本地音频播放"><a href="#本地音频播放" class="headerlink" title="本地音频播放"></a>本地音频播放</h3><ul><li><p>在对应的page页插入以下代码即可：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">name</span>=<span class="string">&quot;media&quot;</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;/music/梦醒时分.m4a&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mp3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><br/><br/><h3 id="音乐模块"><a href="#音乐模块" class="headerlink" title="音乐模块"></a>音乐模块</h3><p>　　参考内容：<a href="https://blog.csdn.net/qq_41467882/article/details/124734598">配置参考</a>、　<a href="https://butterfly.js.org/posts/507c070f/">butterfly</a>、　<a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a></p><ol><li><p>安装插件<br><code>npm install --save hexo-tag-aplayer</code></p><ul><li>用git安装时，会出现<strong>node</strong>识别不到的问题<br>　　解决：用管理员的cmd，在对应的Blog下面直接，就不会出现这个问题。 <br/> <br/></li></ul></li><li><p>Hexo: _config.yml <strong>添加</strong>以下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure> <br/></li><li><p>theme: _config.yml <strong>修改</strong>下面的参数</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure> <br/></li><li><p>配置音乐页面：source\music\index.md</p> <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 音乐</span><br><span class="line">date: 2019-05-17 16:14:00</span><br><span class="line"><span class="section">type: music</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">&#123;% meting &quot;7422861869&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:400px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure> <br/></li><li><p>成品：娱乐-音乐</p></li></ol><br/><br/><h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><div class="note primary no-icon flat"><p>以下几点是目前还没学会的内容，欢迎指教：<br>1、搭建的前三章都没有看，后期记得仔细看下有没有遗漏的地方。<br>2、彩色的菜单栏：<a href="https://blog.xmwpro.com/">https://blog.xmwpro.com/</a><br>3、评论功能还是不能用，点击授权也没问用。网上说现在大家都遇到这个问题了。</p></div>]]></content>
      
      
      <categories>
          
          <category> 9　tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown</title>
      <link href="/2022/08/05/tools/mkfile-edit/"/>
      <url>/2022/08/05/tools/mkfile-edit/</url>
      
        <content type="html"><![CDATA[<p>其他设置：<a href="https://butterfly.js.org/posts/2df239ce/#%E6%96%B9%E6%B3%95%E4%B8%80">https://butterfly.js.org/posts/2df239ce/#%E6%96%B9%E6%B3%95%E4%B8%80</a></p><div class="note info no-icon flat"><p>蓝色：放在文章的顶部，描述本文的主要信息。<br>本文主要介绍markdown的使用技巧。<br>有快捷方式：在行首输入：<code>&gt; </code></p></div><div class="note default no-icon flat"><p>灰色：补充信息，涉及到的外部信息</p></div><div class="note success no-icon flat"><p>绿色：文章中调用</p></div><div class="note warning no-icon flat"><p>黄色：重点-小</p></div><div class="note danger no-icon flat"><p>红色：难点</p></div><div class="note primary no-icon flat"><p>紫色：放在文章底部，记录本文还没解决的地方</p></div><div class="note no-icon flat"><p>作为三级标题</p></div><hr><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><br/><h3 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h3><ul><li><p>&lt;p align&#x3D;”right”&gt;靠右&lt;&#x2F;p&gt;</p><p align="right">靠右</p></li><li><p>&lt;center&gt;中间&lt;&#x2F;center&gt;</p><center>中间</center></li></ul><br/><h3 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h3><p>　　&lt;font color&#x3D;CadetBlue&gt;给字体增加颜色&lt;&#x2F;font&gt;</p><p>　<font color=CadetBlue>　　给字体增加颜色</font><br><br/></p><h3 id="字体高亮"><a href="#字体高亮" class="headerlink" title="字体高亮"></a>字体高亮</h3><p>　　<code>&#123;% label 中道崩殂 blue %&#125;</code></p><p>　　<mark class="hl-label blue">中道崩殂</mark> <br><br/></p><h3 id="行高亮"><a href="#行高亮" class="headerlink" title="行高亮"></a>行高亮</h3><p>　　&lt;table&gt;&lt;tr&gt;&lt;td bgcolor&#x3D;#E8E8E8&gt;文本底色&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;<br>　<table><tr><td bgcolor=#E8E8E8>文本底色</td></tr></table><br><br/></p><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>　这里行首也可以直接用全角空格，反而是不能用 <code>&amp;emsp;</code> </p><p>　全角切换：<code>shift + space</code><br><br/></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>　　[example link](<a href="http://example.com/">http://example.com/</a> “With a Title”)</p><p>　　This is an <a href="http://example.com/" title="With a Title">example link</a>.<br><br/></p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>　正文第一行<br>　直接换行    &#x3D;&gt; 　简单的换行　　<br>　空两格　　&#x3D;&gt;         没有用</p><p>　中间一行空行　&#x3D;&gt; 　另起一段，隔两行也是一样效果<br/><br>　上句末尾用一个 <code>&lt;br/&gt;</code> 　&#x3D;&gt; 　中间隔一行<br><br/></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ol><li>第一点</li><li>第二点<ul><li>下沉 1</li><li>下沉 2</li></ul></li><li>第三点<ol><li>下沉一级</li><li>下沉的二级</li></ol></li></ol><p>下面是另一部分内容的清单阶段：两个<strong>相同符号</strong>之间间隔小，<strong>不同符号</strong>之间间隔大。</p><ul><li>减号节点</li><li>减号节点 -</li></ul><ul><li>星号节点</li><li>星号节点 -</li></ul><ul><li>加号节点</li><li>加号节点 -<br/></li></ul><br/><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="单个"><a href="#单个" class="headerlink" title="单个"></a>单个</h3><table><thead><tr><th>Markdown</th><th align="center">Less</th><th align="right">Pretty</th></tr></thead><tbody><tr><td><em>默认左对齐</em></td><td align="center"><code>此列剧中</code></td><td align="right"><strong>此列右对齐</strong></td></tr><tr><td>1</td><td align="center">2</td><td align="right">3</td></tr><tr><td>11</td><td align="center">22</td><td align="right">33</td></tr></tbody></table><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>　　设置：<a href="https://butterfly.js.org/posts/4aa8abbe/#Tabs">https://butterfly.js.org/posts/4aa8abbe/#Tabs</a></p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><br/><br/><h2 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h2><p>　官网：<a href="https://mermaid-js.github.io/mermaid/#/./classDiagram">https://mermaid-js.github.io/mermaid/#/./classDiagram</a></p><h3 id="classDiagram"><a href="#classDiagram" class="headerlink" title="classDiagram"></a>classDiagram</h3><!-- class_开始 --><div class="note default no-icon flat"><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  %%{init: {&#39;theme&#39;: &#39;default&#39;, &#39;themeVariables&#39;: { &#39;fontSize&#39;: &#39;14px&#39;}}}%%classDiagramdirection LRBankAccount --|&gt; classB : 继承BankAccount ..|&gt; classN : 实现BankAccount --* classD : 组合BankAccount --o classF : 聚合BankAccount --&gt; classH : 关联BankAccount ..&gt; classL : 依赖BankAccount -- classJ : 实线BankAccount .. classP : 虚线%% 类定义class BankAccount{   &lt;&lt;interface&gt;&gt;    +String owner    +BigDecimal balance    +deposit(amount) bool    +withdrawal(amount) int}  </pre></div></div><!-- class_结束 --><br/><br/><h3 id="sequenceDiagram"><a href="#sequenceDiagram" class="headerlink" title="sequenceDiagram"></a>sequenceDiagram</h3><!-- sequenceDiagram_开始 --><div class="note default no-icon flat"><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  sequenceDiagram    participant Function    participant RichFunction    Function-&gt;&gt;RichFunction: + lifecycle, + RuntimeText    loop Healthcheck        KeyedProcessFunction-&gt;&gt;KeyedProcessFunction: Fight against hypochondria    end    Note right of KeyedProcessFunction: Rational thoughts &lt;br&#x2F;&gt;prevail!    KeyedProcessFunction--&gt;&gt;Function: Great!    KeyedProcessFunction-&gt;&gt;RichFunction: How about you?    RichFunction--&gt;&gt;KeyedProcessFunction: Jolly good!  </pre></div></div><!-- sequenceDiagram_结束 --><h3 id="sequenceDiagram-1"><a href="#sequenceDiagram-1" class="headerlink" title="sequenceDiagram"></a>sequenceDiagram</h3><!-- flowchart --><p><a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=graph">https://mermaid-js.github.io/mermaid/#/flowchart?id=graph</a></p><div class="note default no-icon flat"><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR    RDD --&gt; Transform    RDD --&gt; Action  </pre></div></div><!-- 流程图_结束 --><br/><br/><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="侧边栏和按钮"><a href="#侧边栏和按钮" class="headerlink" title="侧边栏和按钮"></a>侧边栏和按钮</h3><ul><li>按钮：<a href="https://butterfly.js.org/posts/4aa8abbe/#Button">https://butterfly.js.org/posts/4aa8abbe/#Button</a></li></ul><ul><li>侧边栏：<a href="https://butterfly.js.org/posts/ea33ab97/">https://butterfly.js.org/posts/ea33ab97/</a><br/><br/></li></ul>]]></content>
      
      
      <categories>
          
          <category> 9　tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>source</title>
      <link href="/2022/08/05/tools/souce/"/>
      <url>/2022/08/05/tools/souce/</url>
      
        <content type="html"><![CDATA[<p>　</p><h2 id="免费商用图片"><a href="#免费商用图片" class="headerlink" title="免费商用图片"></a>免费商用图片</h2><p>　<br>　<a href="https://www.freepik.com/?ref=uisdc.com">https://www.freepik.com/?ref=uisdc.com</a><br>　<br>　<a href="https://unsplash.com/">https://unsplash.com/</a><br>　<br>　<a href="https://www.pexels.com/zh-cn/">https://www.pexels.com/zh-cn/</a><br>　<br>　<a href="https://pixabay.com/">https://pixabay.com/</a><br>　<br>　<a href="https://pngimg.com/">https://pngimg.com/</a><br><br/><br><br/>　</p><h2 id="免费商用字体网站"><a href="#免费商用字体网站" class="headerlink" title="免费商用字体网站"></a>免费商用字体网站</h2><p>　<br>　<a href="https://www.hellofont.cn/home">https://www.hellofont.cn/home</a><br>　<br>　<a href="https://www.zitijia.com/">https://www.zitijia.com/</a><br>　<br>　<a href="https://www.fontspace.com/">https://www.fontspace.com/</a><br>　<br>　<a href="https://www.fonts.net.cn/">https://www.fonts.net.cn/</a><br><br/><br><br/>　</p><h2 id="免费商用视频"><a href="#免费商用视频" class="headerlink" title="免费商用视频"></a>免费商用视频</h2><p>　<br>　<a href="https://www.splitshire.com/">https://www.splitshire.com/</a><br>　<br>　<a href="https://pixabay.com/zh/videos/">https://pixabay.com/zh/videos/</a><br>　<br>　<a href="https://www.pexels.com/zh-cn/">https://www.pexels.com/zh-cn/</a><br>　<br>　<a href="https://www.ignitemotion.com/">https://www.ignitemotion.com/</a><br><br/><br><br/></p><h2 id="免费商用音频"><a href="#免费商用音频" class="headerlink" title="免费商用音频"></a>免费商用音频</h2><p>　<br>　<a href="https://taira-komori.jpn.org/freesoundcn.html">https://taira-komori.jpn.org/freesoundcn.html</a><br>　<br>　<a href="https://www.tosound.com/">https://www.tosound.com/</a><br>　<br>　<a href="https://www.bensound.com/free-music-for-videos">https://www.bensound.com/free-music-for-videos</a><br>　<br>　<a href="https://pixabay.com/zh/">https://pixabay.com/zh/</a><br>　<br>　<a href="https://www.hituyu.com/">https://www.hituyu.com/</a><br><br/><br><br/>　</p><h2 id="有趣的图片网站"><a href="#有趣的图片网站" class="headerlink" title="有趣的图片网站"></a>有趣的图片网站</h2><p>　<br>　<a href="https://www.cleanpng.com/">https://www.cleanpng.com/</a><br>　<br>　<a href="https://moonmooncha.github.io/Lattice-Generator/">https://moonmooncha.github.io/Lattice-Generator/</a><br>　<br>　<a href="http://www.mobanwang.com/">http://www.mobanwang.com/</a><br>　<br>　<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a><br><br/><br><br/><br><br/></p>]]></content>
      
      
      <categories>
          
          <category> 9　tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
            <tag> source </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala-集合</title>
      <link href="/2022/08/05/Language/Scala/"/>
      <url>/2022/08/05/Language/Scala/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 1　programming language </category>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
            <tag> Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink</title>
      <link href="/2022/08/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%AE%9E%E6%97%B6/Flink%E5%87%BD%E6%95%B0/"/>
      <url>/2022/08/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%AE%9E%E6%97%B6/Flink%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><!-- 流程图_开始 --><div class="note default no-icon flat"><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  sequenceDiagram    participant Function    participant RichFunction    Note right of Function: + lifecycle &lt;br&#x2F;&gt;+ RuntimeText        Function-&gt;&gt;RichFunction:     Note right of RichFunction: + processElement &lt;br&#x2F;&gt; + Ontimer &lt;br&#x2F;&gt; + Context    RichFunction-&gt;&gt;KeyedProcessFunction:     Note right of KeyedProcessFunction: + process &lt;br&#x2F;&gt; u: Context &lt;br&#x2F;&gt; + clear(Ctx)    KeyedProcessFunction-&gt;&gt;ProcessWindowFunction:   </pre></div></div><!-- 流程图_结束 --><h3 id="Function-1"><a href="#Function-1" class="headerlink" title="Function"></a>Function</h3><p>　最基础的函数，里面没有任何内容。</p><ul><li>SourceFunction</li><li>SinkFunction</li><li>AggregateFunction<br/><br/></li></ul><h3 id="RichFunction"><a href="#RichFunction" class="headerlink" title="RichFunction"></a>RichFunction</h3><p>　没有具体的执行逻辑，所以也没有 I、O、Collector，具体的功能实现在实现类里面。</p><p>　实现类：<strong>RichMapFunction、RichFlatmapFunction</strong></p><ul><li><p><code>+ lifecycle</code><br>open、close：对于一个<strong>并行子任务</strong>(物理区分)来说只会调用一次<br>　　　　　　　<strong>状态</strong>的更新是针对逻辑分区的，状态是<strong>与key绑定的</strong></p><br/></li><li><p><code>+ RuntimeText</code><br>主要涉及 <strong>任务、执行、状态</strong>的的信息。</p><br/><br/></li></ul><h3 id="KeyedProcessFunction"><a href="#KeyedProcessFunction" class="headerlink" title="KeyedProcessFunction"></a>KeyedProcessFunction</h3><ul><li><code>+ processElement( In, Context, Collectior&lt;Out&gt; )</code></li></ul><ul><li><code>+ Ontimer( timestamp, OnTimerContext, Collector&lt;Out&gt; )</code></li></ul><ul><li><code>+ Context</code>：<strong>TimeStamp、TimeService、output、CurrentKey</strong></li></ul><p>　　<strong>ProcessFunction</strong>：只是少了key信息<br><br/><br><br/></p><h3 id="ProcessWindowFunction"><a href="#ProcessWindowFunction" class="headerlink" title="ProcessWindowFunction"></a>ProcessWindowFunction</h3><p>　重点还是Process，功能针对Window做了调整。</p><ul><li><code>+ process( Key, Context, Iterable&lt;IN&gt;, Collector&lt;OUT&gt; )</code><br>　只有Window会有输入迭代</li></ul><ul><li><code>+ Context</code><br>　保留output，去掉时间服务，增加Window信息</li></ul><ul><li><code>+ clear（Context）</code></li></ul><p>　　<strong>ProcessAllWindowFunction</strong>：同样少了key信息<br><br/><br><br/></p><h2 id="多流转换"><a href="#多流转换" class="headerlink" title="多流转换"></a>多流转换</h2><h3 id="分流"><a href="#分流" class="headerlink" title="分流"></a>分流</h3><ul><li><code>filter()</code><br>不建议使用</li></ul><ul><li><code>ctx.out()</code><br>　<strong>OutputTag</strong>：ProcessFunction.processElement():out</li></ul><h3 id="合流"><a href="#合流" class="headerlink" title="合流"></a>合流</h3><!-- 流程图_class --><div class="note modern"><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  %%{init: {&#39;theme&#39;: &#39;default&#39;, &#39;themeVariables&#39;: { &#39;fontSize&#39;: &#39;14px&#39;}}}%%classDiagramappStream0 --|&gt; appStream : unionappStream1 --|&gt; appStream : unionappStream --|&gt; stream_5 : connectthirdpartyStream --|&gt; stream_5 : connectstream_5 --|&gt; stream_6 : map、flatmap、processstream_5 --|&gt; stream_7 : keyedBy：order_nstream_7 --|&gt; stream_8 : map、flatmap、process%% 类定义class appStream0{    (&quot;order-1&quot;, &quot;app&quot;, 1000L)}class appStream1{    (&quot;order-2&quot;, &quot;app&quot;, 2000L)}class appStream{    (&quot;order-1&quot;, &quot;app&quot;, 1000L)    (&quot;order-2&quot;, &quot;app&quot;, 2000L)}class thirdpartyStream{    (&quot;order-1&quot;, &quot;third-party&quot;, &quot;success&quot;, 3000L)    (&quot;order-3&quot;, &quot;third-party&quot;, &quot;success&quot;, 4000L)}class stream_5{  &lt;&lt;ConnectedStream&gt;&gt; }class stream_6{  &lt;&lt;DataStream&gt;&gt; }class stream_7{  &lt;&lt;ConnectedStream&gt;&gt;   (&quot;order-1&quot;, &quot;app&quot;, 1000L)  (&quot;order-1&quot;, &quot;third-party&quot;, &quot;success&quot;, 3000L)}class stream_8{  &lt;&lt;DataStream&gt;&gt; }  </pre></div></div><!-- 流程图_结束 --><div class="note default no-icon flat"><p><strong>union</strong></p></div><p>　DataStream<T>  <code>union</code>(DataStream<T>… streams)<br>　两条流的数据类型一致。<br><br/></p><div class="note default no-icon flat"><p><strong>Connect</strong></p></div><ol><li><p><code>ConnectedStreams&lt;T, R&gt;: stream1.connect(stream2)</code><br>通过上面的命令，只是看似将两条流简单的合并在了一起，实际上没有任何的处理，也没有任何用。</p><ul><li>这一步骤在语法上可有可无，实际业务如果需要keyBy使用即可。<br>connectedStreams.<code>keyBy</code>(keySelector1, keySelector2)<br/><br/></li></ul></li><li><p><code>=&gt; DataStream</code><br>观察下面运用的函数，都是CoXX，就是函数里都有针对两条流的处理方法，就是这样达到了不同内容流的合并。</p><ul><li>map( CoMapFunction )</li><li>flatMap(CoFlatmapFunction)</li><li>process( CoProcessFunction )<br/></li></ul></li></ol><div class="note success disabled"><p><strong>案例：订单核对</strong></p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter08_Streams;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.eventtime.WatermarkStrategy;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.typeinfo.Types;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple3;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple4;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.co.CoProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单核对</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BillCheck</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">StreamExecutionEnvironment</span> <span class="variable">env</span> <span class="operator">=</span> StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        <span class="comment">// appStream</span></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple3&lt;String, String, Long&gt;&gt; appStream = env</span><br><span class="line">                .fromElements(</span><br><span class="line">                    (<span class="string">&quot;order-1&quot;</span>, <span class="string">&quot;app&quot;</span>, <span class="number">1000L</span>),</span><br><span class="line">                    (<span class="string">&quot;order-2&quot;</span>, <span class="string">&quot;app&quot;</span>, <span class="number">2000L</span>)</span><br><span class="line">                )</span><br><span class="line">                .assignTimestampsAndWatermarks(WatermarkStrategy</span><br><span class="line">                        .&lt;Tuple3&lt;String, String, Long&gt;&gt;forMonotonousTimestamps()</span><br><span class="line">                        .withTimestampAssigner((order,y) -&gt; order.f2)</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// thirdpartyStream</span></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple4&lt;String, String, String, Long&gt;&gt; thirdpartyStream = env.</span><br><span class="line">                    fromElements(</span><br><span class="line">                        Tuple4.of(<span class="string">&quot;order-1&quot;</span>, <span class="string">&quot;third-party&quot;</span>, <span class="string">&quot;success&quot;</span>, <span class="number">3000L</span>),</span><br><span class="line">                        Tuple4.of(<span class="string">&quot;order-3&quot;</span>, <span class="string">&quot;third-party&quot;</span>, <span class="string">&quot;success&quot;</span>, <span class="number">4000L</span>)</span><br><span class="line">                    )</span><br><span class="line">                    .assignTimestampsAndWatermarks(WatermarkStrategy</span><br><span class="line">                            .&lt;Tuple4&lt;String, String, String, Long&gt;&gt;forMonotonousTimestamps()</span><br><span class="line">                            .withTimestampAssigner((event, y) -&gt; event.f3)</span><br><span class="line">                     );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测同一支付订单在两条流中是否匹配</span></span><br><span class="line">        appStream.connect(thirdpartyStream)</span><br><span class="line">                .keyBy(order -&gt; order.f0, thirdparty -&gt; thirdparty.f0)</span><br><span class="line">                .process(<span class="keyword">new</span> <span class="title class_">OrderMatchResult</span>())</span><br><span class="line">                .print() ;</span><br><span class="line"></span><br><span class="line">        env.execute() ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OrderMatchResult</span> <span class="keyword">extends</span> <span class="title class_">CoProcessFunction</span>&lt;Tuple3&lt;String, String, Long&gt;,Tuple4&lt;String, String, String, Long&gt;, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ValueState&lt;Tuple4&lt;String, String, String, Long&gt;&gt; thirdpartyEventStat ;</span><br><span class="line">        <span class="keyword">private</span> ValueState&lt;Tuple3&lt;String, String, Long&gt;&gt; appEventState;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// 仅是对上面定义的状态属性的实例化</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            thirdpartyEventStat = getRuntimeContext().getState(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ValueStateDescriptor</span>&lt;Tuple4&lt;String, String, String, Long&gt;&gt;(</span><br><span class="line">                            <span class="string">&quot;thirdparty-event&quot;</span></span><br><span class="line">                            , Types.TUPLE(Types.STRING,Types.STRING,Types.STRING,Types.LONG)</span><br><span class="line">                    )</span><br><span class="line">            ) ;</span><br><span class="line"></span><br><span class="line">            appEventState = getRuntimeContext().getState(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ValueStateDescriptor</span>&lt;Tuple3&lt;String, String, Long&gt;&gt;(</span><br><span class="line">                            <span class="string">&quot; app-event&quot;</span></span><br><span class="line">                            ,Types.TUPLE(Types.STRING,Types.STRING,Types.LONG)</span><br><span class="line">                    )</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这个操作是keyedStream之后的</span></span><br><span class="line"><span class="comment">         *      所以在key是1-1的数据里，有数据进来，一定是key对应需要的那条</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processElement1</span><span class="params">(Tuple3&lt;String, String, Long&gt; value, Context ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="keyword">if</span> (thirdpartyEventStat.value() != <span class="literal">null</span> ) &#123;</span><br><span class="line">                out.collect(<span class="string">&quot;对账成功：&quot;</span> + value + <span class="string">&quot; &quot;</span> + thirdpartyEventStat.value());</span><br><span class="line">                thirdpartyEventStat.clear();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                appEventState.update(value);</span><br><span class="line">                <span class="comment">// 5秒之后再次进行对账</span></span><br><span class="line">                ctx.timerService().registerProcessingTimeTimer(value.f2 + <span class="number">5000L</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processElement2</span><span class="params">(Tuple4&lt;String, String, String, Long&gt; value, Context ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="keyword">if</span> (appEventState.value() != <span class="literal">null</span> ) &#123;</span><br><span class="line">                out.collect(<span class="string">&quot;对账成功：&quot;</span> + appEventState.value() + <span class="string">&quot; &quot;</span> + value);</span><br><span class="line">                appEventState.clear();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                thirdpartyEventStat.update(value);</span><br><span class="line">                ctx.timerService().registerProcessingTimeTimer(value.f3 + <span class="number">5000L</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTimer</span><span class="params">(<span class="type">long</span> timestamp, OnTimerContext ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="keyword">if</span> (appEventState.value() != <span class="literal">null</span>) &#123;</span><br><span class="line">                out.collect(<span class="string">&quot;对账失败：&quot;</span> + appEventState.value() + <span class="string">&quot; &quot;</span> + <span class="string">&quot;第三方平台消息未到&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (thirdpartyEventStat != <span class="literal">null</span>) &#123;</span><br><span class="line">                out.collect(<span class="string">&quot;对账失败：&quot;</span> + thirdpartyEventStat.value() + <span class="string">&quot; &quot;</span> + <span class="string">&quot;app信息未到&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            appEventState.clear();</span><br><span class="line">            thirdpartyEventStat.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><br/><h3 id="联结"><a href="#联结" class="headerlink" title="联结"></a>联结</h3><div class="note default no-icon flat"><p><strong>Window Join</strong></p></div><p>JoinedStream只能用<code>apply</code>方法处理</p><!-- 流程图_class --><div class="note modern"><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  %%{init: {&#39;theme&#39;: &#39;default&#39;, &#39;themeVariables&#39;: { &#39;fontSize&#39;: &#39;14px&#39;}}}%%classDiagramdirection LRstream1 --|&gt; stream3 : joinstream2 --|&gt; stream3 : joinstream3 --|&gt; stream4 : apply( \n　JoinFunction、FlatJoinFunction )%% 类定义class stream1{  Tuple2.of(&quot;a&quot;, 1000L)  Tuple2.of(&quot;b&quot;, 1000L)  Tuple2.of(&quot;a&quot;, 2000L)  Tuple2.of(&quot;b&quot;, 2000L)}class stream2{  Tuple2.of(&quot;a&quot;, 3000L)  Tuple2.of(&quot;b&quot;, 3000L)  Tuple2.of(&quot;a&quot;, 4000L)  Tuple2.of(&quot;b&quot;, 4000L)}class stream3{  &lt;&lt;JoinedStream&gt;&gt;  \.where(x -&gt; x.f0)  \.equalTo(y -&gt; y.f0)  \.window(TumblingEventTimeWindows\n　　　.of(Time.seconds(5)))}class stream4{  &lt;&lt;DataStream&gt;&gt;  (a,1000) &#x3D;&gt; (a,3000)  (a,1000) &#x3D;&gt; (a,4000)  (a,2000) &#x3D;&gt; (a,3000)  (a,2000) &#x3D;&gt; (a,4000)  (b,1000) &#x3D;&gt; (b,3000)  (b,1000) &#x3D;&gt; (b,4000)  (b,2000) &#x3D;&gt; (b,3000)  (b,2000) &#x3D;&gt; (b,4000)}  </pre></div></div><!-- 流程图_结束 --><div class="note success disabled"><p><strong>案例：订单核对</strong></p></div><br/><br/><div class="note default no-icon flat"><p><strong>Interval Join</strong></p></div><!-- 流程图_class --><div class="note modern"><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  %%{init: {&#39;theme&#39;: &#39;default&#39;, &#39;themeVariables&#39;: { &#39;fontSize&#39;: &#39;14px&#39;}}}%%classDiagramdirection TBorderStream --|&gt; stream3 : keyedstream3 --|&gt; stream4 : intervalJoinclickStream --|&gt; stream4 : intervalJoinstream4 --|&gt; stream5 : process(ProcessJoinFunction)%% 类定义class orderStream{  (&quot;Alice&quot;, &quot;order-2&quot;, 5000L)  (&quot;Bob&quot;, &quot;order-3&quot;, 20000L)  (&quot;Alice&quot;, &quot;order-4&quot;, 20000L)}class stream3{  &lt;&lt;KeyedStream&gt;&gt;}class clickStream{  (&quot;Bob&quot;, &quot;.&#x2F;cart&quot;, 2000L)  (&quot;Alice&quot;, &quot;.&#x2F;prod?id&#x3D;100&quot;, 3000L)  (&quot;Alice&quot;, &quot;.&#x2F;prod?id&#x3D;200&quot;, 3500L)  (&quot;Bob&quot;, &quot;.&#x2F;prod?id&#x3D;2&quot;, 2500L)  (&quot;Alice&quot;, &quot;.&#x2F;prod?id&#x3D;300&quot;, 36000L)  (&quot;Bob&quot;, &quot;.&#x2F;home&quot;, 30000L)  (&quot;Bob&quot;, &quot;.&#x2F;prod?id&#x3D;1&quot;, 23000L)  (&quot;Bob&quot;, &quot;.&#x2F;prod?id&#x3D;3&quot;, 33000L)}class stream4{  &lt;&lt;KeyedStream&gt;&gt;  \.intervalJoin(clickStream.keyBy(data -&gt; data.user))  \.between(Time.seconds(-5),Time.seconds(10))}class stream5{  &lt;&lt;DataStream&gt;&gt;  (Alice,　.&#x2F;prod?id&#x3D;100,　00:03_00) &#x3D;&gt; (Alice,order-2,5000)  (Alice, 　.&#x2F;prod?id&#x3D;200,　00:03_500) &#x3D;&gt; (Alice,order-2,5000)  (Bob,　.&#x2F;home,　00:30_00)&#x3D;&gt; (Bob,order-3,20000)  (Bob,　.&#x2F;prod?id&#x3D;1,　00:23_00) &#x3D;&gt; (Bob,order-3,20000)}  </pre></div></div><!-- 流程图_结束 --><br/><br/><div class="note default no-icon flat"><p><strong>CoGroup</strong></p></div><br/><br/>]]></content>
      
      
      <categories>
          
          <category> 2　大数据 </category>
          
          <category> 实时 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> 实时 </tag>
            
            <tag> Flink </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive</title>
      <link href="/2022/08/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/NSQL/Hive/"/>
      <url>/2022/08/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/NSQL/Hive/</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h3>]]></content>
      
      
      <categories>
          
          <category> 2　大数据 </category>
          
          <category> NSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> NSQL </tag>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark</title>
      <link href="/2022/08/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%AE%9E%E6%97%B6/Spark/"/>
      <url>/2022/08/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%AE%9E%E6%97%B6/Spark/</url>
      
        <content type="html"><![CDATA[<h2 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h2><p>　官方文档：<a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html">https://spark.apache.org/docs/latest/rdd-programming-guide.html</a></p><h3 id="一元RDD"><a href="#一元RDD" class="headerlink" title="一元RDD"></a>一元RDD</h3><!-- 流程图_开始 --><div class="note default no-icon flat"><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR    RDD --&gt; transformation    RDD --&gt; collection        RDD --&gt; action    RDD --&gt; 不同RDD之间的转换    transformation -- 映射 --&gt; 映射{{map, flatMap}}    transformation -- 过滤 --&gt; 过滤{{filter, distinct}}    transformation -- 排序 --&gt; 排序{{sorted}}    collection -- 集合 --&gt; 集合{{union, intersection, subtract, cartesian}}    action -- 取得元素 --&gt; 取得元素{{collect, take, top, takeOrdered}}    action -- 简单计算 --&gt; 简单计算{{count, countByValue, foreach}}    action -- 聚合 --&gt; 聚合{{reduce, fold, aggregate}}  </pre></div></div><!-- 流程图_结束 --><ul><li><p><strong>映射</strong></p></li><li><p><strong>过滤</strong></p><br/><br/></li></ul><h3 id="PairRDD"><a href="#PairRDD" class="headerlink" title="PairRDD"></a>PairRDD</h3><!-- 流程图_开始 --><div class="note default no-icon flat"><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR    PairRDD --&gt; transformation    PairRDD --&gt; PairRDD_2        PairRDD --&gt; action    transformation -- 映射 --&gt; 映射{{mapValue, flatMapValue}}    transformation -- 过滤 --&gt; 过滤{{keys, values}}    transformation -- 聚合 --&gt; 聚合{{reduceByKey, groupByKey, combineByKey}}    transformation -- 排序 --&gt; 排序{{sortedByKey}}    PairRDD_2 -- 转化 --&gt; 转化{{subtractByKey, join, leftOuterJoin, rightOuterJoin, cogroup }}    action -- 取得元素 --&gt; 取得元素{{collectAsMap}}    action -- 简单计算 --&gt; 简单计算{{countByKey}}    action -- 查找 --&gt; 查找{{lookup}}  </pre></div></div><!-- 流程图_结束 --><br/><br/><br/>]]></content>
      
      
      <categories>
          
          <category> 2　大数据 </category>
          
          <category> 实时 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> 实时 </tag>
            
            <tag> Stream </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
